2.1 Ничего интересного
2.2 Сравнение списка питон и массива нампай (нампай возводит в квадрат 1 000 000 элементов за 986 ms нампай - 53.3 ms
2.3 pip install numpy -> pip show numpy
2.4 import numpy as np
2.5 Создание двумерного массива:
    arr = np.array([[element1, element2,..., elementN],[element1, element2,..., elementN]]) 
    Для больших размерностей нужно просто больше квадратных скобок
  Длина одномерного массива через len(_array_)
  Длина многомерного - _array_.shape
  Кол-во измерений многомерного массива - _array_.ndim
2.6 Тип данных - _array_.dtype
  Тип подбирается автоматически. Типизация делает массивы очень быстрыми
2.7 Инициализация нулями: 
    arr=np.zeros((n,m, ..., z))
    Кортеж начиается с количества подмассивов (для двумерного кол-ва строк) и заканчивается кол-вом нулей в каждом массиве(для двумерного кол-вом столбцов). Работает и для одномерного массива
2.8 Инициализация единицами:
    arr=np.ones((n,m, ..., z))
2.9 Инициализация кастомными значениями:
    arr=np.full((n,m, ..., z), x)
    x - значение для заполнения
  Вопрос: нахера zeros и ones?...
2.10 Инициализаци элементами по порядку:
    arr=arrange(n)
    n - длина массива
2.11 Ничего интересного
